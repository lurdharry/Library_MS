-- ========================
-- üì¶ SCHEMA CREATION
-- ========================

-- Create Permissions Table
CREATE TABLE IF NOT EXISTS user_permissions (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

-- Create Roles Table
CREATE TABLE IF NOT EXISTS user_roles (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

-- Create Role-Permissions Join Table
CREATE TABLE IF NOT EXISTS user_roles_permissions (
    role_entity_id INTEGER NOT NULL,
    permissions_id INTEGER NOT NULL,
    PRIMARY KEY (role_entity_id, permissions_id),
    FOREIGN KEY (role_entity_id) REFERENCES user_roles (id) ON DELETE CASCADE,
    FOREIGN KEY (permissions_id) REFERENCES user_permissions (id) ON DELETE CASCADE
);

-- ========================
-- üîê PERMISSIONS
-- ========================

INSERT INTO user_permissions (name) VALUES
  ('VIEW_BOOKS'),
  ('VIEW_PROFILE'),
  ('UPDATE_PROFILE'),
  ('CONTACT_SUPPORT'),
  ('USER_BORROW_BOOK'),
  ('USER_RETURN_BOOK'),
  ('USER_RESERVE_BOOK'),
  ('USER_RENEW_BOOK'),
  ('USER_VIEW_HISTORY'),
  ('USER_PAY_FINE'),
  ('USER_RATE_BOOK'),
  ('ATTENDANT_CHECKIN_BOOK'),
  ('ATTENDANT_CHECKOUT_BOOK'),
  ('ATTENDANT_VERIFY_RETURN'),
  ('ATTENDANT_MANAGE_RESERVES'),
  ('ATTENDANT_MANAGE_INVENTORY'),
  ('ATTENDANT_VIEW_USERS'),
  ('ATTENDANT_MANAGE_FINES'),
  ('ATTENDANT_GENERATE_REPORTS'),
  ('ATTENDANT_COMMUNICATE_USER'),
  ('ATTENDANT_TAG_DAMAGED_BOOK'),
  ('ADMIN_MANAGE_USERS'),
  ('ADMIN_MANAGE_PERMISSIONS'),
  ('ADMIN_CREATE_ATTENDANT'),
  ('ADMIN_CREATE_USER'),
  ('ADMIN_RESET_PASSWORD'),
  ('ADMIN_DELETE_ACCOUNT'),
  ('ADMIN_VIEW_SYSTEM_AUDIT'),
  ('ADMIN_CONFIGURE_SETTINGS'),
  ('ADMIN_MANAGE_BOOK_CATEGORIES'),
  ('ADMIN_OVERRIDE_FINE_POLICY'),
  ('ADMIN_UPLOAD_BULK_BOOKS'),
  ('ADMIN_PROMOTE_USER_TO_ATTENDANT'),
  ('ADMIN_MANAGE_BACKUP');

-- ========================
-- üë• ROLES
-- ========================

INSERT INTO user_roles (name) VALUES ('USER'), ('ATTENDANT'), ('ADMIN');

-- ========================
-- üîó MAP ROLES TO PERMISSIONS
-- ========================

-- USER permissions
INSERT INTO user_roles_permissions (role_entity_id, permissions_id)
SELECT r.id, p.id
FROM user_roles r, user_permissions p
WHERE r.name = 'USER' AND p.name IN (
  'VIEW_BOOKS', 'VIEW_PROFILE', 'UPDATE_PROFILE', 'CONTACT_SUPPORT',
  'USER_BORROW_BOOK', 'USER_RETURN_BOOK', 'USER_RESERVE_BOOK',
  'USER_RENEW_BOOK', 'USER_VIEW_HISTORY', 'USER_PAY_FINE', 'USER_RATE_BOOK'
);

-- ATTENDANT permissions (inherits USER)
INSERT INTO user_roles_permissions (role_entity_id, permissions_id)
SELECT r.id, p.id
FROM user_roles r, user_permissions p
WHERE r.name = 'ATTENDANT' AND p.name IN (
  'VIEW_BOOKS', 'VIEW_PROFILE', 'UPDATE_PROFILE', 'CONTACT_SUPPORT',
  'USER_BORROW_BOOK', 'USER_RETURN_BOOK', 'USER_RESERVE_BOOK',
  'USER_RENEW_BOOK', 'USER_VIEW_HISTORY', 'USER_PAY_FINE', 'USER_RATE_BOOK',
  'ATTENDANT_CHECKIN_BOOK', 'ATTENDANT_CHECKOUT_BOOK', 'ATTENDANT_VERIFY_RETURN',
  'ATTENDANT_MANAGE_RESERVES', 'ATTENDANT_MANAGE_INVENTORY', 'ATTENDANT_VIEW_USERS',
  'ATTENDANT_MANAGE_FINES', 'ATTENDANT_GENERATE_REPORTS', 'ATTENDANT_COMMUNICATE_USER',
  'ATTENDANT_TAG_DAMAGED_BOOK'
);

-- ADMIN permissions (inherits ATTENDANT and USER)
INSERT INTO user_roles_permissions (role_entity_id, permissions_id)
SELECT r.id, p.id
FROM user_roles r, user_permissions p
WHERE r.name = 'ADMIN' AND p.name IN (
  'VIEW_BOOKS', 'VIEW_PROFILE', 'UPDATE_PROFILE', 'CONTACT_SUPPORT',
  'USER_BORROW_BOOK', 'USER_RETURN_BOOK', 'USER_RESERVE_BOOK',
  'USER_RENEW_BOOK', 'USER_VIEW_HISTORY', 'USER_PAY_FINE', 'USER_RATE_BOOK',
  'ATTENDANT_CHECKIN_BOOK', 'ATTENDANT_CHECKOUT_BOOK', 'ATTENDANT_VERIFY_RETURN',
  'ATTENDANT_MANAGE_RESERVES', 'ATTENDANT_MANAGE_INVENTORY', 'ATTENDANT_VIEW_USERS',
  'ATTENDANT_MANAGE_FINES', 'ATTENDANT_GENERATE_REPORTS', 'ATTENDANT_COMMUNICATE_USER',
  'ATTENDANT_TAG_DAMAGED_BOOK',
  'ADMIN_MANAGE_USERS', 'ADMIN_MANAGE_PERMISSIONS', 'ADMIN_CREATE_ATTENDANT',
  'ADMIN_CREATE_USER', 'ADMIN_RESET_PASSWORD', 'ADMIN_DELETE_ACCOUNT',
  'ADMIN_VIEW_SYSTEM_AUDIT', 'ADMIN_CONFIGURE_SETTINGS', 'ADMIN_MANAGE_BOOK_CATEGORIES',
  'ADMIN_OVERRIDE_FINE_POLICY', 'ADMIN_UPLOAD_BULK_BOOKS',
  'ADMIN_PROMOTE_USER_TO_ATTENDANT', 'ADMIN_MANAGE_BACKUP'
);
